RECURSION

0.) Identify Base Case(s)
1.) Identify Recursive Case(s)
2.) Return where appropriate.
3.) Write procedures for each case that bring you closer to the base case.

DIVIDE AND CONQUER

Recursive calls to a subset of the problem.
0.) Recognize base case
1.) Divide - Break the problem down further during each call of the function
2.) Conquer - Do work on each subset
3.) Combine - Bring the subsets together

const memoize = (fn) => {
	let cache = {}
  return (...args) => {
  let n = args[0];
  if (n in cache) {
  console.log('Fetching from cache', n)
  return cache[n]
  }
  else {
  console.log('Calculating result', n);
  let result = fn(n);
  cache[n] = result;
  return result
  }
  }
}

const factorial = memoize((x) => {
	if (x == 0) {
  return 1;
  }
  else {
  return x * factorial(x - 1);
  }
})

const factorial(5)
const factorial(6)

function linearSearch(list, item) {
	let index = -1
	list.forEach((listItem, i) => {
  if (listItem === item) {
  	index = i;
  }
  });
  return(index)
}


linearSearch([2,6,7,90,103], 90);

function binarySearch(list, item) {
let min = 0;
let max = list.length - 1;
let guess;

while (min <= max) {
	guess = Math.floor((min + max) / 2)
  
  if (list[guess] === item) {
  	return guess
  } else {
  	if (list[guess] < item) {
    min = guess + 1;
    } else {
    max = guess - 1;
    }
  }
}

return -1;
}

binarySearch([2,6,7,90,103], 90);

let list1 = [9,2,5,6,4,3,7,10,1,8]
let list2 = [1,2,3,4,5,6,7,8,9,10]
let list3 = [10,9,8,7,6,5,4,3,2,1]

function swap(array, i, j) {
let temp = array[i]
array[i] = array[j]
array[j] = temp;
}

function bubbleSortBasic(array) {
let outerCount = 0
let innerCount = 0
let countSwap = 0

for(let i=0; i < array.length; i++){
outerCount++;
	for(let j=0; j < array.length; j++){
  innerCount++;
  if(array[j - 1] > array[j]) {
  countSwap++;
  swap(array, j -1, j)
  }
  }
}
}

bubbleSortBasic(list1)


function mergeSort (arr) {
	if (arr.length === 1) {
		return arr
	}
	
	const middle = Math.floor(arr.length / 2)
	const left  = arr.slice(0, middle)
	const right = arr.slice(middle)
	const sortedLeft = mergeSort(left)
	const sortedRight = mergeSort(right)
	return merge(sortedLeft, sortedRight)
}


function merge (left, right) {
	let result = []
	let indexLeft = 0
	let indexRight = 0
	while (indexLeft < left.length && indexRight < right.length) {
	if (left[indexLeft] < right[indexRight]) {
		result.push(left[indexLeft])
		indexLeft++
		} else {
		result.push(right[indexRight])
		indexRight++
		}
	}

	return result.concat(left.slice(indexLeft)).concat(right.slice(indexRight))
}

background: hsla(154, 100%, 76%, 1);

background: linear-gradient(90deg, hsla(154, 100%, 76%, 1) 0%, hsla(234, 100%, 83%, 1) 50%, hsla(288, 100%, 81%, 1) 100%);

background: -moz-linear-gradient(90deg, hsla(154, 100%, 76%, 1) 0%, hsla(234, 100%, 83%, 1) 50%, hsla(288, 100%, 81%, 1) 100%);

background: -webkit-linear-gradient(90deg, hsla(154, 100%, 76%, 1) 0%, hsla(234, 100%, 83%, 1) 50%, hsla(288, 100%, 81%, 1) 100%);

filter: progid: DXImageTransform.Microsoft.gradient( startColorstr="#84FFC9", endColorstr="#AAB2FF", GradientType=1 );